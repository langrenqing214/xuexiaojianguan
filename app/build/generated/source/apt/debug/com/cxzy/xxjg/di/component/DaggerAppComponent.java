// Generated by Dagger (https://google.github.io/dagger).
package com.cxzy.xxjg.di.component;

import android.content.Context;
import com.cxzy.xxjg.di.module.AppModule;
import com.cxzy.xxjg.di.module.AppModule_ProvideContextFactory;
import com.cxzy.xxjg.di.module.HttpModule;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetAddMenuListFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetAddRetentionFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetAddTrialFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetChangePwdFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetHealthExaminationFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetLoginFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetMenuListFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetPurchaseFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetRetentionFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetScanResultFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetTestsFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetTrialListFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetUserInfoFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetVideoFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideNetWarningListFactory;
import com.cxzy.xxjg.di.module.HttpModule_ProvideOkHttpClientFactory;
import com.cxzy.xxjg.net.AddMenuApi;
import com.cxzy.xxjg.net.AddRetentionApi;
import com.cxzy.xxjg.net.AddTrialApi;
import com.cxzy.xxjg.net.ChangePwdApi;
import com.cxzy.xxjg.net.HealthExaminationApi;
import com.cxzy.xxjg.net.LoginApi;
import com.cxzy.xxjg.net.MainFragmentApi;
import com.cxzy.xxjg.net.MenuApi;
import com.cxzy.xxjg.net.PurchaseApi;
import com.cxzy.xxjg.net.RetentionApi;
import com.cxzy.xxjg.net.ScanResultApi;
import com.cxzy.xxjg.net.TrialManagementApi;
import com.cxzy.xxjg.net.VideoApi;
import com.cxzy.xxjg.net.WarningApi;
import com.cxzy.xxjg.net.testApi;
import dagger.internal.Preconditions;

public final class DaggerAppComponent implements AppComponent {
  private AppModule appModule;

  private HttpModule httpModule;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appModule = builder.appModule;
    this.httpModule = builder.httpModule;
  }

  @Override
  public Context getContext() {
    return AppModule_ProvideContextFactory.proxyProvideContext(appModule);
  }

  @Override
  public testApi getNetTestApi() {
    return HttpModule_ProvideNetTestsFactory.proxyProvideNetTests(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public LoginApi getNetLoginApi() {
    return HttpModule_ProvideNetLoginFactory.proxyProvideNetLogin(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public MainFragmentApi getUserInfoApi() {
    return HttpModule_ProvideNetUserInfoFactory.proxyProvideNetUserInfo(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public TrialManagementApi getTrialApi() {
    return HttpModule_ProvideNetTrialListFactory.proxyProvideNetTrialList(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public MenuApi getMenuApi() {
    return HttpModule_ProvideNetMenuListFactory.proxyProvideNetMenuList(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public AddMenuApi getAddMenuApi() {
    return HttpModule_ProvideNetAddMenuListFactory.proxyProvideNetAddMenuList(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public PurchaseApi getPurchaseApi() {
    return HttpModule_ProvideNetPurchaseFactory.proxyProvideNetPurchase(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public AddRetentionApi getAddRetentApi() {
    return HttpModule_ProvideNetAddRetentionFactory.proxyProvideNetAddRetention(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public RetentionApi getRetentApi() {
    return HttpModule_ProvideNetRetentionFactory.proxyProvideNetRetention(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public WarningApi getWarningApi() {
    return HttpModule_ProvideNetWarningListFactory.proxyProvideNetWarningList(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public AddTrialApi getAddTrialApi() {
    return HttpModule_ProvideNetAddTrialFactory.proxyProvideNetAddTrial(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public HealthExaminationApi getHealthApi() {
    return HttpModule_ProvideNetHealthExaminationFactory.proxyProvideNetHealthExamination(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public ScanResultApi getScanResultApi() {
    return HttpModule_ProvideNetScanResultFactory.proxyProvideNetScanResult(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public VideoApi getVideoApi() {
    return HttpModule_ProvideNetVideoFactory.proxyProvideNetVideo(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  @Override
  public ChangePwdApi getChangePwdApi() {
    return HttpModule_ProvideNetChangePwdFactory.proxyProvideNetChangePwd(
        httpModule, HttpModule_ProvideOkHttpClientFactory.proxyProvideOkHttpClient(httpModule));
  }

  public static final class Builder {
    private AppModule appModule;

    private HttpModule httpModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      if (httpModule == null) {
        this.httpModule = new HttpModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder httpModule(HttpModule httpModule) {
      this.httpModule = Preconditions.checkNotNull(httpModule);
      return this;
    }
  }
}
