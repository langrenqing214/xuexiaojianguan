// Generated by Dagger (https://google.github.io/dagger).
package com.cxzy.xxjg.di.module;

import com.cxzy.xxjg.net.LoginApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class HttpModule_ProvideNetLoginFactory implements Factory<LoginApi> {
  private final HttpModule module;

  private final Provider<OkHttpClient.Builder> builderProvider;

  public HttpModule_ProvideNetLoginFactory(
      HttpModule module, Provider<OkHttpClient.Builder> builderProvider) {
    this.module = module;
    this.builderProvider = builderProvider;
  }

  @Override
  public LoginApi get() {
    return Preconditions.checkNotNull(
        module.provideNetLogin(builderProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static HttpModule_ProvideNetLoginFactory create(
      HttpModule module, Provider<OkHttpClient.Builder> builderProvider) {
    return new HttpModule_ProvideNetLoginFactory(module, builderProvider);
  }

  public static LoginApi proxyProvideNetLogin(HttpModule instance, OkHttpClient.Builder builder) {
    return Preconditions.checkNotNull(
        instance.provideNetLogin(builder),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
